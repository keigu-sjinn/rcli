fail_fast: false
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.3.0
    hooks:
      - id: check-byte-order-marker
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-symlinks
      - id: check-yaml
      - id: end-of-file-fixer
      - id: mixed-line-ending
        args: [--fix=lf]
      - id: trailing-whitespace
  - repo: https://github.com/psf/black
    rev: 22.10.0
    hooks:
      - id: black
  - repo: local
    hooks:
      - id: cargo-fmt
        name: cargo fmt
        description: Format files with rustfmt.
        entry: bash -c 'cargo fmt -- --check || cargo fmt'
        language: rust
        files: \.rs$
        args: []
      - id: cargo-deny
        name: cargo deny check
        description: Check cargo dependencies
        entry: bash -c 'cargo deny check -d'
        language: rust
        files: \.rs$
        args: []
      - id: typos
        name: typos
        description: check typo
        entry: bash -c 'typos'
        language: rust
        files: \.*$
        pass_filenames: false
      - id: cargo-check
        name: cargo check
        description: Check the package for errors.
        entry: bash -c 'cargo check --all'
        language: rust
        files: \.rs$
        pass_filenames: false
      - id: cargo-clippy
        name: cargo clippy
        description: Lint rust sources
        entry: bash -c 'cargo clippy --all-targets --all-features --tests --benches -- -D warnings'
        language: rust
        files: \.rs$
        pass_filenames: false
      - id: cargo-test
        name: cargo test
        description: unit test for the project
        entry: bash -c 'cargo nextest run --all-features --no-tests pass'
        language: rust
        files: \.rs$
        pass_filenames: false
      - id: cargo-sort
        name: Check Cargo.toml is sorted
        description: Ensure Cargo.toml is sorted
        entry: bash -c 'cargo sort --workspace'
        language: rust
        files: Cargo\.toml
        pass_filenames: false
      # - id: cargo-hakari
      #   name: Check if workspace-hack works correctly
      #   description: Ensure workspace-hack works correctly
      #   entry: bash -c 'cargo hakari generate --diff && cargo hakari manage-deps --dry-run && cargo hakari verify'
      #   language: rust
      #   files: Cargo\.(toml|lock)
      #   pass_filenames: false
      # - id: cargo machete
      #   name: Check if all dependencies are used
      #   description: Ensure no unused dependencies in /crates increase compiling time
      #   entry: bash -c 'cargo machete --fix crates/'
      #   language: rust
      #   files: Cargo\.toml
      #   pass_filenames: false
      - id: git-cliff
        name: Generate changelog
        description: Use git-cliff to generate a changelog
        entry: git-cliff
        args: [--config, cliff.toml, --output, CHANGELOG.md, --unreleased]
        language: system
        pass_filenames: false
        always_run: true
      # - id: add-changelog
      #   name: Add changelog to staging
      #   description: Add generated CHANGELOG.md to git staging area
      #   entry: git add CHANGELOG.md
      #   language: system
      #   pass_filenames: false
      #   always_run: true
      #   stages: [commit]
